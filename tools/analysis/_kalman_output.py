# Copyright 2021 by Daniel Winkelman. All rights reserved.
# This file is autogenerated by kalman_gen.py.

import numpy as np

# State Transition Function
def f(x, u, deltat):
	(xs, xn, dxndt, Ph, Ps, Chl, Csl, rhoeta, AhAs, FfdAs, xs0, Ph0,) = x.T[0]
	(xe,) = u.T[0]
	#deltat = deltat
	return np.array([[
		xn + Ps * pow(Csl, -1),  # xs
		xn + deltat * dxndt,  # xn
		Ps * pow(rhoeta, -1),  # dxndt
		Chl * (xe + -1 * xs),  # Ph
		AhAs * Ph + -1 * FfdAs,  # Ps
		Chl,  # Chl
		Csl,  # Csl
		rhoeta,  # rhoeta
		AhAs,  # AhAs
		FfdAs,  # FfdAs
		xs0,  # xs0
		Ph0,  # Ph0
	]]).T

# State Transition Function Gradient
def dfdx(x, u, deltat):
	(xs, xn, dxndt, Ph, Ps, Chl, Csl, rhoeta, AhAs, FfdAs, xs0, Ph0,) = x.T[0]
	(xe,) = u.T[0]
	#deltat = deltat
	return np.array([
		[0, 1, 0, 0, pow(Csl, -1), 0, -1 * pow(Csl, -2) * Ps, 0, 0, 0, 0, 0,],  # xs
		[0, 1, deltat, 0, 0, 0, 0, 0, 0, 0, 0, 0,],  # xn
		[0, 0, 0, 0, pow(rhoeta, -1), 0, 0, -1 * pow(rhoeta, -2) * Ps, 0, 0, 0, 0,],  # dxndt
		[-1 * Chl, 0, 0, 0, 0, xe + -1 * xs, 0, 0, 0, 0, 0, 0,],  # Ph
		[0, 0, 0, AhAs, 0, 0, 0, 0, Ph, -1, 0, 0,],  # Ps
		[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,],  # Chl
		[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,],  # Csl
		[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,],  # rhoeta
		[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,],  # AhAs
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,],  # FfdAs
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,],  # xs0
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,],  # Ph0
	])

# Observation Function
def h(x):
	(xs, xn, dxndt, Ph, Ps, Chl, Csl, rhoeta, AhAs, FfdAs, xs0, Ph0,) = x.T[0]
	return np.array([[
		xs + xs0,  # xs_in
		Ph + Ph0,  # Ph_in
	]]).T

# Observation Function Gradient
def dhdx(x):
	(xs, xn, dxndt, Ph, Ps, Chl, Csl, rhoeta, AhAs, FfdAs, xs0, Ph0,) = x.T[0]
	return np.array([
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,],  # xs_in
		[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,],  # Ph_in
	])

# Initial State
x0 = np.array([[
		0,  # xs
		0,  # xn
		0,  # dxndt
		0,  # Ph
		0,  # Ps
		3.4,  # Chl
		1.7,  # Csl
		20,  # rhoeta
		0.5,  # AhAs
		0,  # FfdAs
		0,  # xs0
		5000,  # Ph0
]]).T

# Initial State Covariance
P0 = np.diag([
		10,  # xs
		10,  # xn
		10,  # dxndt
		3,  # Ph
		3,  # Ps
		0.1,  # Chl
		0.1,  # Csl
		0.1,  # rhoeta
		0.1,  # AhAs
		1,  # FfdAs
		1,  # xs0
		1000,  # Ph0
])

# State Noise
Q = np.diag([
		10,  # xs
		10,  # xn
		10,  # dxndt
		100,  # Ph
		100,  # Ps
		0.1,  # Chl
		0.1,  # Csl
		0.1,  # rhoeta
		0.1,  # AhAs
		1,  # FfdAs
		10,  # xs0
		50,  # Ph0
])

# Observation Noise
R = np.diag([
		10,  # xs_in
		100,  # Ph_in
])
